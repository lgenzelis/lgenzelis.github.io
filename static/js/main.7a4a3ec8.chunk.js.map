{"version":3,"sources":["chuck_app.js","index.js"],"names":["ChuckFact","props","state","error","isLoaded","fact","loadingNPoints","errorMsg","this","setState","Popup","alert","nAttempts","config","undefined","showNsfwFacts","params","category","axios","get","then","res","console","log","data","categories","checkAndUpdateKnownIds","id","value","errorWhileGettingFact","getChuckFact","catch","toString","interval","setInterval","tick","window","scroll","top","document","body","scrollHeight","behavior","clearInterval","repeat","React","Component","ChuckApp","knownFactsIds","Set","factsList","is_new_id","has","add","concat","key","length","buttonText","onClick","addChuckFact","EnterApp","includeNsfw","onCheckboxChange","bind","className","src","alt","height","enterChuckApp","htmlFor","type","onChange","Main","currentScreen","currentScreenRendered","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7a4a3ec8.chunk.js","sourcesContent":["import React from 'react';\nimport './styles.css';\nimport './popups.css';\nimport './chuck_app.css';\nimport axios from 'axios';\nimport Popup from 'react-popup';\n\n\nclass ChuckFact extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            fact: null,\n            loadingNPoints: 3,\n        };\n    }\n\n    errorWhileGettingFact(errorMsg) {\n        this.setState({\n            error: errorMsg,\n            isLoaded: true,\n        });\n        Popup.alert(errorMsg, 'An error has occurred :(');\n    }\n\n    getChuckFact(nAttempts = 1) {\n        let config = undefined;\n        if (!this.props.showNsfwFacts) {\n            config = {\n                params: {\n                    category: 'animal,career,celebrity,dev,fashion,food,history,money,movie,music,political,religion,science,sport,travel',\n                }\n            }\n        }\n        axios.get('https://api.chucknorris.io/jokes/random', config)\n            .then(res => {\n                console.log(res.data.categories);\n                if (this.props.checkAndUpdateKnownIds(res.data.id)) {\n                    this.setState({\n                        fact: res.data.value,\n                        isLoaded: true,\n                    });\n\n                }\n                else {\n                    console.log(`Got an already known fact. Attempted ${nAttempts} times.`);\n                    if (nAttempts >= 10) {\n                        this.errorWhileGettingFact(\n                            'Max number of attempts reached. ' +\n                            'It seems that you already know all the facts!');\n                    } else {\n                        this.getChuckFact(nAttempts + 1);\n                    }\n                }\n            })\n            .catch(error => {\n                console.log(error);\n                this.errorWhileGettingFact(error.toString());\n            });\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => this.tick(), 200);\n        this.getChuckFact();\n        window.scroll({top: document.body.scrollHeight, behavior: 'smooth'}); // this line gets executed before axios gets a response\n    }\n\n    componentDidUpdate() {\n        // window.scrollTo(0, document.body.scrollHeight);\n        window.scroll({top: document.body.scrollHeight, behavior: 'smooth'});\n        // document.body.animate({scrollTop: document.body.scrollHeight}, 8000); //,\"fast\");\n    }\n\n    tick() {\n        this.setState({\n            loadingNPoints: (this.state.loadingNPoints + 1) % 4,\n        });\n    }\n\n    render() {\n        let fact;\n        if (!this.state.isLoaded) {\n            fact = 'Loading ' + '.'.repeat(this.state.loadingNPoints);\n        } else {\n            clearInterval(this.interval);\n            this.interval = null;\n            if (this.state.error) {\n                fact = null;\n            } else {\n                fact = this.state.fact;\n            }\n        }\n        if (fact) {\n            return (\n                <li>\n                    {/*<strong>*/}\n                    {fact}\n                    {/*</strong>*/}\n                </li>\n            );\n        }\n        else {\n            return null;\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n    }\n\n}\n\n\nexport default class ChuckApp extends React.Component {\n\n    knownFactsIds = new Set();\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            factsList: [],\n        };\n    }\n\n    checkAndUpdateKnownIds (id) {\n        const is_new_id = !this.knownFactsIds.has(id);\n        if (is_new_id) {\n            this.knownFactsIds.add(id);\n        }\n        return is_new_id;\n    }\n\n    addChuckFact() {\n        this.setState({\n            // I can't use the response id as the key, because for that I would need to know the key *before*\n            // making the axios request\n            factsList: this.state.factsList.concat(\n                <ChuckFact\n                    key={this.state.factsList.length}\n                    showNsfwFacts={this.props.showNsfwFacts}\n                    checkAndUpdateKnownIds={(id) => this.checkAndUpdateKnownIds(id)}\n                />),\n        });\n    }\n\n    render() {\n        let buttonText = ( this.state.factsList.length > 0 ? 'Add another Chuck Norris fact' : 'Add a Chuck Norris fact');\n        return (\n            <div>\n                <button\n                    id=\"add_fact_button\"\n                    onClick={() => this.addChuckFact()}\n                >\n                    {buttonText}\n                </button>\n                <button id=\"add_fact_button_hidden\"> {buttonText} </button>   {/*merely to make the layout work as expected*/}\n                <div>\n                    <ul>\n                        {this.state.factsList}\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.css';\nimport './index.css';\nimport './fancy_button.css';\nimport './popups.css';\nimport Popup from 'react-popup';\nimport ChuckApp from './chuck_app';\n\n\nclass EnterApp extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            includeNsfw: false,\n        };\n        this.onCheckboxChange = this.onCheckboxChange.bind(this);\n    }\n\n    onCheckboxChange() {\n        // pass a function to setState to avoid synchronicity issues\n        this.setState((state) => ({includeNsfw: !state.includeNsfw}) );\n    }\n\n    render() {\n        return (\n            <div className=\"enter-page\">\n                <img id=\"dancing_chuck\" src=\"dancing_chuck.gif\" alt=\"Dancing Chuck\" height=\"80\"/>\n                <div className=\"enter-main-region\">\n                    <button\n                        onClick={() => this.props.enterChuckApp(this.state.includeNsfw)}\n                    >\n                        Take me to ChuckFacts!\n                    </button>\n                    {/*<p className=\"message\">*/}\n                        <label htmlFor=\"include_nsfw\" className=\"toggle\">\n                            <input\n                                type=\"checkbox\"\n                                className=\"toggle__input\"\n                                id=\"include_nsfw\"\n                                onChange={this.onCheckboxChange}\n                            />\n                            <span className=\"toggle__label\">\n                                <span className=\"toggle__text\">Show NSFW facts</span>\n                            </span>\n                        </label>\n                    {/*</p>*/}\n                </div>\n            </div>\n        );\n    }\n\n}\n\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentScreen: 'EnterApp',\n            showNsfwFacts: false,\n        }\n    }\n\n    render() {\n        const currentScreenRendered =\n            this.state.currentScreen === 'EnterApp' ?\n                <EnterApp\n                    enterChuckApp={\n                        (showNsfwFacts) => this.setState({\n                            currentScreen: 'ChuckApp',\n                            showNsfwFacts: showNsfwFacts,\n                        })\n                    }\n                />\n                :\n                <ChuckApp showNsfwFacts={this.state.showNsfwFacts} />;\n        return (\n           <div>\n               <Popup />\n               {currentScreenRendered}\n            </div>\n        );\n    }\n}\n\n\nReactDOM.render(\n    <Main />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}